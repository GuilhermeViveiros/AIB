// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ficha4.data_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: data_job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class data_job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "data_job";
	private final String projectName = "FICHA4";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					data_job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(data_job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBarChart_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_FICHA4_data_job = new byte[0];
		static byte[] commonByteArray_FICHA4_data_job = new byte[0];

		public String series;

		public String getSeries() {
			return this.series;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public int Age;

		public int getAge() {
			return this.Age;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA4_data_job.length) {
					if (length < 1024 && commonByteArray_FICHA4_data_job.length == 0) {
						commonByteArray_FICHA4_data_job = new byte[1024];
					} else {
						commonByteArray_FICHA4_data_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA4_data_job, 0, length);
				strReturn = new String(commonByteArray_FICHA4_data_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA4_data_job) {

				try {

					int length = 0;

					this.series = readString(dis);

					this.Country = readString(dis);

					this.Age = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.series, dos);

				// String

				writeString(this.Country, dos);

				// int

				dos.writeInt(this.Age);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("series=" + series);
			sb.append(",Country=" + Country);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_FICHA4_data_job = new byte[0];
		static byte[] commonByteArray_FICHA4_data_job = new byte[0];

		public String series;

		public String getSeries() {
			return this.series;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA4_data_job.length) {
					if (length < 1024 && commonByteArray_FICHA4_data_job.length == 0) {
						commonByteArray_FICHA4_data_job = new byte[1024];
					} else {
						commonByteArray_FICHA4_data_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA4_data_job, 0, length);
				strReturn = new String(commonByteArray_FICHA4_data_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA4_data_job) {

				try {

					int length = 0;

					this.series = readString(dis);

					this.Country = readString(dis);

					this.family_history = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.series, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.family_history, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("series=" + series);
			sb.append(",Country=" + Country);
			sb.append(",family_history=" + family_history);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FICHA4_data_job = new byte[0];
		static byte[] commonByteArray_FICHA4_data_job = new byte[0];

		public java.util.Date Timestamp;

		public java.util.Date getTimestamp() {
			return this.Timestamp;
		}

		public int Age;

		public int getAge() {
			return this.Age;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA4_data_job.length) {
					if (length < 1024 && commonByteArray_FICHA4_data_job.length == 0) {
						commonByteArray_FICHA4_data_job = new byte[1024];
					} else {
						commonByteArray_FICHA4_data_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA4_data_job, 0, length);
				strReturn = new String(commonByteArray_FICHA4_data_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA4_data_job) {

				try {

					int length = 0;

					this.Timestamp = readDate(dis);

					this.Age = dis.readInt();

					this.Gender = readString(dis);

					this.Country = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Timestamp, dos);

				// int

				dos.writeInt(this.Age);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + String.valueOf(Timestamp));
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Gender=" + Gender);
			sb.append(",Country=" + Country);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/Applications/TOSBD-7.2.1/studio/workspace/out.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"/Applications/TOSBD-7.2.1/studio/workspace/tmp.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */
						"/Users/guilhermeviveiros/Desktop/4ano-1semestre/AIB/mental_health.csv"/**
																								 * End field
																								 * tFileInputDelimited_6:FILENAME
																								 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_6)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_6.readNext()) {

								totalLinetFileInputDelimited_6++;

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
											: totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6
										? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {
						rowstate_tFileInputDelimited_6.reset();

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6.getValues();

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_6_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.Timestamp = null;

								row1.Age = 0;

								row1.Gender = null;

								row1.Country = null;

								row1.state = null;

								row1.self_employed = null;

								row1.family_history = null;

								row1.treatment = null;

								row1.work_interfere = null;

								row1.no_employees = null;

								row1.remote_work = null;

								row1.tech_company = null;

								row1.benefits = null;

								row1.care_options = null;

								row1.wellness_program = null;

								row1.seek_help = null;

								row1.anonymity = null;

								row1.leave = null;

								row1.mental_health_consequence = null;

								row1.phys_health_consequence = null;

								row1.coworkers = null;

								row1.supervisor = null;

								row1.mental_health_interview = null;

								row1.phys_health_interview = null;

								row1.mental_vs_physical = null;

								row1.obs_consequence = null;

								row1.comments = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {

											row1.Timestamp = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
													"yyyy-MM-dd HH:mm:ss");

										} catch (java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Timestamp", "row1",
															rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
															ex_tFileInputDelimited_6),
													ex_tFileInputDelimited_6));
										}
									} else {

										row1.Timestamp = null;

									}

								} else {

									row1.Timestamp = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {

											row1.Age = ParserUtils.parseTo_int(
													rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

										} catch (java.lang.Exception ex_tFileInputDelimited_6) {
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Age", "row1",
															rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
															ex_tFileInputDelimited_6),
													ex_tFileInputDelimited_6));
										}
									} else {

										rowstate_tFileInputDelimited_6.setException(new RuntimeException(
												"Value is empty for column : 'Age' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_6.setException(new RuntimeException(
											"Value is empty for column : 'Age' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.Gender = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.Gender = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.Country = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.Country = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.state = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.state = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.self_employed = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.self_employed = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.family_history = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.family_history = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.treatment = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.treatment = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.work_interfere = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.work_interfere = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.no_employees = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.no_employees = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 10;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.remote_work = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.remote_work = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 11;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.tech_company = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.tech_company = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 12;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.benefits = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.benefits = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 13;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.care_options = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.care_options = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 14;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.wellness_program = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.wellness_program = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 15;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.seek_help = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.seek_help = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 16;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.anonymity = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.anonymity = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 17;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.leave = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.leave = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 18;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.mental_health_consequence = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.mental_health_consequence = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 19;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.phys_health_consequence = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.phys_health_consequence = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 20;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.coworkers = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.coworkers = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 21;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.supervisor = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.supervisor = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 22;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.mental_health_interview = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.mental_health_interview = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 23;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.phys_health_interview = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.phys_health_interview = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 24;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.mental_vs_physical = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.mental_vs_physical = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 25;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.obs_consequence = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.obs_consequence = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 26;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row1.comments = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row1.comments = null;

								}

							}

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								out1 = null;
								out2 = null;

// # Output table : 'out1'
								out1_tmp.series = "Age (mean)";
								out1_tmp.Country = row1.Country;
								out1_tmp.Age = row1.Age;
								out1 = out1_tmp;

// # Output table : 'out2'
								out2_tmp.series = "Family_History";
								out2_tmp.Country = row1.Country;
								out2_tmp.family_history = row1.family_history;
								out2 = out2_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								// out1
								// out1

								if (execStat) {
									runStat.updateStatOnConnection("out1" + iterateId, 1, 1);
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (out1.series != null) {
									sb_tFileOutputDelimited_1.append(out1.series);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (out1.Country != null) {
									sb_tFileOutputDelimited_1.append(out1.Country);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								sb_tFileOutputDelimited_1.append(out1.Age);
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

							} // End of branch "out1"

// Start of branch "out2"
							if (out2 != null) {

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								// out2
								// out2

								if (execStat) {
									runStat.updateStatOnConnection("out2" + iterateId, 1, 1);
								}

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								if (out2.series != null) {
									sb_tFileOutputDelimited_3.append(out2.series);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (out2.Country != null) {
									sb_tFileOutputDelimited_3.append(out2.Country);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (out2.family_history != null) {
									sb_tFileOutputDelimited_3.append(out2.family_history);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_end ] stop
								 */

							} // End of branch "out2"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", nb_line_tFileInputDelimited_6);
					}

				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_7Process(globalMap);

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FICHA4_data_job = new byte[0];
		static byte[] commonByteArray_FICHA4_data_job = new byte[0];

		public String series;

		public String getSeries() {
			return this.series;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public Integer value;

		public Integer getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA4_data_job.length) {
					if (length < 1024 && commonByteArray_FICHA4_data_job.length == 0) {
						commonByteArray_FICHA4_data_job = new byte[1024];
					} else {
						commonByteArray_FICHA4_data_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA4_data_job, 0, length);
				strReturn = new String(commonByteArray_FICHA4_data_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA4_data_job) {

				try {

					int length = 0;

					this.series = readString(dis);

					this.category = readString(dis);

					this.value = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.series, dos);

				// String

				writeString(this.category, dos);

				// Integer

				writeInteger(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("series=" + series);
			sb.append(",category=" + category);
			sb.append(",value=" + String.valueOf(value));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tBarChart_1 begin ] start
				 */

				ok_Hash.put("tBarChart_1", false);
				start_Hash.put("tBarChart_1", System.currentTimeMillis());

				currentComponent = "tBarChart_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tBarChart_1 = 0;

				int nb_line_tBarChart_1 = 0;
				org.jfree.data.category.DefaultCategoryDataset dataset_tBarChart_1 = new org.jfree.data.category.DefaultCategoryDataset();

				/**
				 * [tBarChart_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try {

					Object filename_tFileInputDelimited_7 = "/Applications/TOSBD-7.2.1/studio/workspace/out.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0 || random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"/Applications/TOSBD-7.2.1/studio/workspace/out.csv", "ISO-8859-15", ";", "\n", true, 0,
								0, limit_tFileInputDelimited_7, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row2.series = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row2.category = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								try {

									row2.value = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"value", "row2", temp, ex_tFileInputDelimited_7),
											ex_tFileInputDelimited_7));
								}

							} else {

								row2.value = null;

							}

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tBarChart_1 main ] start
							 */

							currentComponent = "tBarChart_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
							}

							dataset_tBarChart_1.setValue(row2.value, row2.series, row2.category);
							nb_line_tBarChart_1++;

							tos_count_tBarChart_1++;

							/**
							 * [tBarChart_1 main ] stop
							 */

							/**
							 * [tBarChart_1 process_data_begin ] start
							 */

							currentComponent = "tBarChart_1";

							/**
							 * [tBarChart_1 process_data_begin ] stop
							 */

							/**
							 * [tBarChart_1 process_data_end ] start
							 */

							currentComponent = "tBarChart_1";

							/**
							 * [tBarChart_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("/Applications/TOSBD-7.2.1/studio/workspace/out.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tBarChart_1 end ] start
				 */

				currentComponent = "tBarChart_1";

				org.jfree.chart.JFreeChart chart_tBarChart_1 = org.jfree.chart.ChartFactory.createBarChart(
						"MentalHealth -> Age by Country", "Country", "Age", dataset_tBarChart_1,
						org.jfree.chart.plot.PlotOrientation.HORIZONTAL, true, false, false);

				// Foreground value
				final org.jfree.chart.plot.Plot plot_tBarChart_1 = chart_tBarChart_1.getPlot();
				plot_tBarChart_1.setForegroundAlpha(0.8f);
				org.jfree.chart.ChartUtilities.saveChartAsPNG(
						new java.io.File("/Applications/TOSBD-7.2.1/studio/workspace/out.png"), chart_tBarChart_1, 1000,
						1000);
				globalMap.put("tBarChart_1_NB_LINE", nb_line_tBarChart_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tBarChart_1", true);
				end_Hash.put("tBarChart_1", System.currentTimeMillis());

				/**
				 * [tBarChart_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tBarChart_1 finally ] start
				 */

				currentComponent = "tBarChart_1";

				/**
				 * [tBarChart_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileDelete_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FICHA4_data_job = new byte[0];
		static byte[] commonByteArray_FICHA4_data_job = new byte[0];

		public String series;

		public String getSeries() {
			return this.series;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public Integer value;

		public Integer getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA4_data_job.length) {
					if (length < 1024 && commonByteArray_FICHA4_data_job.length == 0) {
						commonByteArray_FICHA4_data_job = new byte[1024];
					} else {
						commonByteArray_FICHA4_data_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA4_data_job, 0, length);
				strReturn = new String(commonByteArray_FICHA4_data_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA4_data_job) {

				try {

					int length = 0;

					this.series = readString(dis);

					this.category = readString(dis);

					this.value = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.series, dos);

				// String

				writeString(this.category, dos);

				// Integer

				writeInteger(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("series=" + series);
			sb.append(",category=" + category);
			sb.append(",value=" + String.valueOf(value));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						"/Applications/TOSBD-7.2.1/studio/workspace/tmp.csv");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", "/Applications/TOSBD-7.2.1/studio/workspace/tmp.csv");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				// row4
				// row4

				if (execStat) {
					runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
				}

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						"/Applications/TOSBD-7.2.1/studio/workspace/out.csv");
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH", "/Applications/TOSBD-7.2.1/studio/workspace/out.csv");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final data_job data_jobClass = new data_job();

		int exitCode = data_jobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = data_job.class.getClassLoader()
					.getResourceAsStream("ficha4/data_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = data_job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_6) {
			globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : data_job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 112471 characters generated by Talend Open Studio for Big Data on the
 * November 19, 2019 at 7:14:46 PM WET
 ************************************************************************************************/